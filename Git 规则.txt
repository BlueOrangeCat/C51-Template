git rm


git add 已修改文件纳入暂存区当中
git commit 暂存区提交本地仓库
git rm 暂存区回退已修改状态


git log 提交日志
git diff 比较各区差别


git pull
git push



4.Git 命令行操作
4.1 本地库初始化
命令：git add

注意:
.git 目录中存放的是本地库相关的子目录和文件，不要删除，也不要胡乱修改


4.2 设置签名
形式：
用户名：
Email 地址：
作用：区分不同开发人员的身份
辨析：这里设置的签名和代码托管中心的账号、密码没有任何关系
命令：
项目级别/仓库级别：尽在当前本地库范围有效
git config user.name ……
git config user.email ……
信息保存位置：./.git/config 文件	cat ./.git/config


系统用户级别：登陆当前操作系统的用户范围
git config -global user.name ……
git config -global user.email ……
信息保存位置：~/.git/config 文件	cat ~/.git/config

git commit -m "……" main.c

级别优先级：
就近原则：项目级别优先于系统用户级别，二者都有时采用项目级别的签名
如果只有系统用户级别的签名，就以系统用户级别的签名为准
二者都没有不允许

git status
git add [file name]
git commit -m "commit message" [file name]

多屏显示控制方式
空格向下翻页
b 向上翻页
q 退出

git log
git log --pretty =oneline
git log --oneline
git reflog

版本前进后退
git reset --hard [索引值]
使用 ^ 符号 ：只能后退
git reset --hard HEAD ^
注：一个^表示后退一步，n个表示后退 n 步
使用 ~ 符号 ：只能后退
git reset --hard HEAD~n

基于索引值操作

reset 命令的三个参数对比
--soft 参数
仅仅在本地仓库移动 HEAD 指针

--mixed 参数
在本地仓库移动 HEAD 指针，重置暂存区

--hard 参数
在本地库移动 HEAD 指针
重置暂存区
重置工作区

git reflog 

删除文件并找回
前提：删除前，文件存在时的状态提交到了本地库；
操作：git reset --hard [指针位置]
删除操作已经提交到本地库：指针位置指向历史记录
删除操作尚未提交到本地库：指针位置指向HEAD

指针位置：历史记录或当前位置

diff 
git diff [文件名]
将工作区中的文件和暂存区进行比较

git diff [本地库中历史版本][文件名]
将工作区中的文件和本地库历史记录比较

不带文件名比较多个文件

4.4 分支管理
在版本控制过程中，使用多条线同时推进多个任务。
创建分支
git branch [分支名]
查看分支
git branch -v
切换分支
git checkout [分支名]
合并分支
第一步：切换到被合并的分支上，增加新内容；
git checkout[被合并分支名]
第二步：执行 merge 命令
git merge[有新内容分支名]

解决冲突
 同一个文件的同一个位置，不同改写
冲突分支表现
冲突的解决
第一步：编辑文件，删除特殊符号
第二步：把文件修改到满意的程度，保存退出
第三步：git add [文件名]
第四步：git commit -m “日志信息”
注意：此时 commit 一定不能带具体文件名

5.Git 基本原理
5.1 哈希
明文 -> 加密算法 -> 密文
校验文件
服务器端：
原始文件->网络传输->目标文件
SHA-1 算法
GIT 传输校验

5.2 Git 保存版本的机制

5.2 Git 的“提交对象”
5.3 Git 分支管理机制
5.3.1 分支的创建
root commit

Windows 凭据
GitHub 推送
git remote -v
git remote add origin https://…….git
git push origin master 

6.6 拉取
克隆
git clone [远程地址]
效果：
完整的把远程库下载到本地
创建 origin 远程地址别名
初始化本地库

6.7 拉取
远程库拉取
pull = fetch + merge
git fetch[远程库地址别名][远程分支名]
git merge [远程库地址别名][远程分支名]
不太会产生冲突
git merge [远程库地址别名][远程分支名]

6.8 解决冲突
要点：
如果不是基于 GitHub 远程库的最新版所做的修改，不能推送，必须先拉取。
拉取下来如果进入冲突状体，则按照“分支冲突解决”操作解决即可。

跨团体协作
folk
clone
push
Pull requests
Creat pull request
审核代码->合并代码
将远程库拉取到本地


SSH 登录

$ cd ~
进入用户家目录

运行命令生成 .ssh 密钥目录

ssh -keygen -t -rsa -C [GitHub邮箱]

注意：这里 -C 这个参数是大写的C
进入
.ssh 目录查看文件列表

$ cd .ssh
$ ls -IF
查看 id_ras.pub 文件内容

$ cat id_ras.pub
复制 id_ras.pub 文件内容。
登录 GitHub，点击用户头像->Setting->SSH and GPG
keys
New SSH Key
输入复制的密钥信息

回到 Git bash 创建远程地址别名
$ git remote add origin_ssh [GitHub仓库 SSH]

推送文件进行测试
























